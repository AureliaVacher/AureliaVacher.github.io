{"version":3,"sources":["app/PageElements/Banner.jsx","app/PageElements/SkillsCards.jsx","app/PageElements/Titles.jsx","app/App.js","serviceWorker.js","index.js","ressources/logo/Linkedin_circle.svg_.png"],"names":["Banner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","href","title","target","rel","src","LinkedIn","alt","Component","SkillsCards","Titles","App","PageElements_Banner","PageElements_Titles","PageElements_SkillsCards","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"qPAyCeA,cAnCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,GAHEP,wEAUf,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,qBAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,wBAGAH,EAAAC,EAAAC,cAAA,KACIC,UAAU,cACVC,KAAK,6CACLC,MAAM,WACNC,OAAO,SACPC,IAAI,uBAEJP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAUN,UAAU,WAAWO,IAAI,uBA3BhDC,aCmBNC,0LAlBP,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,QAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,SAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,iBAZWQ,cCsBXE,cAjBX,SAAAA,EAAYtB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACfrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KAEDQ,MAAQ,GAHEP,wEASf,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXR,KAAKJ,MAAMc,cAfNM,aCsBNG,MApBf,WACE,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACa,EAAD,OAEFf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACc,EAAD,CAAQX,MAAO,YAEjBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACe,EAAD,OAEFjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACc,EAAD,CAAQX,MAAO,iBCRHa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.07853e53.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport LinkedIn from '../../ressources/logo/Linkedin_circle.svg_.png'\n//styles\nimport '../../styles/App.scss'\n\nclass Banner extends Component {\n    constructor(props) {\n        super(props) \n        \n        this.state = {\n        \n        }\n    }\n\n    render() {\n        \n        return (\n            <div className='banner' >\n                <div className='bannerContent'>\n                    <h1 className='name'>\n                        Aur√©lia Vacher\n                    </h1>\n                    <p className='function'>\n                        Full-Stack Developer\n                    </p>\n                    <a \n                        className='float-right' \n                        href='https://www.linkedin.com/in/aurelia-vacher' \n                        title='LinkedIn' \n                        target='_blank' \n                        rel='noopener noreferrer'\n                    >\n                        <img src={LinkedIn} className=\"LinkedIn\" alt=\"LinkedIn\" />\n                    </a>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Banner","import React, { Component } from 'react'\n//styles\nimport '../../styles/App.scss'\n\nclass SkillsCards extends Component {\n    render() {\n        return (\n            <div className='skillsCards' >\n               <div className='skillsCardsContent'>\n                    piou\n               </div>\n\n               <div className='skillsCardsContent'>\n                   plouf\n               </div>\n\n               <div className='skillsCardsContent'>\n                   ahhhh\n               </div>\n            </div>\n        )\n    }\n}\n\nexport default SkillsCards","import React, { Component } from 'react'\nimport propTypes from 'prop-types'\n//styles\nimport '../../styles/App.scss'\n\nclass Titles extends Component {\n    static propTypes = {\n        title : propTypes.string\n    }   \n    constructor(props) {\n        super(props) \n        \n        this.state = {\n        \n        }\n    }\n\n    render() {\n        return (\n            <div className='title' >\n               {this.props.title}\n            </div>\n        )\n    }\n}\n\nexport default Titles","import React from 'react'\nimport '../styles/App.scss'\nimport Banner from './PageElements/Banner'\nimport PortfolioCards from './PageElements/PortfolioCards'\nimport SkillsCards from './PageElements/SkillsCards'\nimport Titles from './PageElements/Titles'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className=\"App-header\">\n        <Banner />\n      </header>\n      <div className='App-title'>\n        <Titles title={'Skills'}/>\n      </div>\n      <div className='App-skills'>\n        <SkillsCards />\n      </div>\n      <div className='App-title'>\n        <Titles title={'Portfolio'}/>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/Linkedin_circle.svg_.44a7ed58.png\";"],"sourceRoot":""}